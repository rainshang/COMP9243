#!/usr/bin/python3
import sys
import os
import importlib
from commonlib import *

def main():
    if len(sys.argv) != 4:
        raise ValueError("Wrong paramater format!\nIt should be:\n./minimoto_setup keyfile aws_access_key_id aws_secret_access_key")
    keyfile = sys.argv[1]
    aws_access_key_id = sys.argv[2]
    aws_secret_access_key = sys.argv[3]
    """save to config file"""
    add_config(
        {
            CONFIG_KEYFILE_NAME: os.path.splitext(os.path.basename(keyfile))[0],
            CONFIG_KEYID: aws_access_key_id,
            CONFIG_KEY: aws_secret_access_key
        })
    """chmod of keyfile and install boto3"""
    os.system(CMD_CHMOD.format(mode = 400, file = keyfile))
    if importlib.util.find_spec('boto3') is None:
        # it should be sudo, however, on CSE machine, we cannot use sudo...
        os.system('pip3 install boto3')
    """create SQS"""
    sqs = boto3_resource('sqs')
    queue = sqs.create_queue(
        QueueName = NAME_SQS,
        Attributes = {
            'VisibilityTimeout': TIMEOUT_SQS_MSG
        })
    add_config(
        {
            CONFIG_SQS_URL: queue.url
        }
    )
    """create S3 buckets"""
    s3 = boto3_resource('s3')
    bucket_input = s3.create_bucket(
        Bucket = NAME_BUCKET_INPUT,
        CreateBucketConfiguration = {
            'LocationConstraint': REGION
        })
    bucket_output = s3.create_bucket(
        Bucket = NAME_BUCKET_OUTPUT,
        CreateBucketConfiguration = {
            'LocationConstraint': REGION
        })
    """create EC2 security_group"""
    ec2 = boto3_resource('ec2')
    security_group = ec2.create_security_group(
        Description = NAME_SECURITY_GROUP,
        GroupName = NAME_SECURITY_GROUP
    )
    # setup ssh access
    security_group.authorize_ingress(
        CidrIp = '0.0.0.0/0',
        FromPort = 22,
        IpProtocol = "tcp",
        ToPort = 22
    )
    """create EC2 instances"""
    client = boto3_create_instance(ec2, DEFAULT_AMI, TYPE_CLIENT)
    ssh_do_cmd(keyfile, client, CMD_INSTALL_PIP)
    ssh_do_cmd(keyfile, client, CMD_INSTALL_BOTO3)
    upload_py('commonlib.py', client)
    upload_py('minimoto_client', client)

    watchdog = boto3_create_instance(ec2, DEFAULT_AMI, TYPE_WATCHDOG)
    ssh_do_cmd(keyfile, watchdog, CMD_INSTALL_PIP)
    ssh_do_cmd(keyfile, watchdog, CMD_INSTALL_BOTO3)
    upload_py('commonlib.py', client)
    upload_py('minimoto_watchdog', client)

    origin_transcode_service = boto3_create_instance(ec2, DEFAULT_AMI, TYPE_TRANSCODE_SERVICE)
    ssh_do_cmd(keyfile, origin_transcode_service, CMD_INSTALL_PIP)
    ssh_do_cmd(keyfile, origin_transcode_service, CMD_INSTALL_BOTO3)
    ssh_do_cmd(keyfile, origin_transcode_service, CMD_INSTALL_TRANSCODE_SUPPORT)
    upload_py('commonlib.py', client)
    upload_py('minimoto_transcode', client)
    scp_upload(keyfile, 'transcode.cron', origin_transcode_service)
    ssh_do_cmd(keyfile, origin_transcode_service, CMD_CRON_TRANSCODE)

    """print all the mandatory out messages"""
    print("SQS_REQUEST_QUEUE={}".format(NAME_SQS))
    print("S3_BUCKET_INPUT=s3://{}".format(NAME_BUCKET_INPUT))
    print("S3_BUCKET_OUTPUT=s3://{}".format(NAME_BUCKET_OUTPUT))
    print("CLIENT_USER={}".format(ASW_EC2_USER))
    print("CLIENT_ADDR={}".format(client.public_dns_name))
    print("WATCHDOG_USER={}".format(ASW_EC2_USER))
    print("WATCHDOG_ADDR={}".format(watchdog.public_dns_name))
    print("SERVICE_USER={}".format(ASW_EC2_USER))
    print("SERVICE_AMI={}".format(DEFAULT_AMI))

def upload_py(file, host_instance):
    scp_upload(keyfile, file, host_instance)
    ssh_do_cmd(keyfile, host_instance, CMD_CHMOD.format(mode = 500, file = file))

if __name__ == '__main__':
    main()